<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- 메일인증  -->
		<bean id="javaMailSender" 
	    class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host" value="smtp.naver.com"/>
	    <!-- <property name="port" value="465"/> -->        
	    <property name="port" value="587"/>        
	    <property name="username" value="@naver.com"/>
	    <property name="password" value="1q2w3e4r!"/>
	    <property name="protocol" value="smtps"/>        
	    <property name="defaultEncoding" value="utf-8"/>
	    <property name="javaMailProperties">
	        <props>
	            <prop key="mail.transport.protocol">smtp</prop>
               <prop key="mail.smtp.auth">true</prop>
               <prop key="mail.smtp.starttls.enable">true</prop>
               <prop key="mail.debug">true</prop>
	        </props>
	    </property>        
	</bean>

	<bean id="dataSource-origin" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
 		<!--<property name="url" value="jdbc:oracle:thin:@database-1.c6runf3sy2g3.ap-northeast-2.rds.amazonaws.com:1521:ORCL "/>-->
	
		
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe "/>
		<!--  
		<property name="url" value="jdbc:oracle:thin:@database-1.c6runf3sy2g3.ap-northeast-2.rds.amazonaws.com:1521:ORCL "/>
		-->
	
		<property name="username" value="allpyon"/>
		<property name="password" value="allpyonpw"/>
	</bean>
	
	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">  
        <constructor-arg ref="dataSource-origin" />
        <property name="logFormatter">
            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">    
                <property name="loggingType" value="MULTI_LINE" />
                <property name="sqlPrefix" value="[SQL] " />
            </bean>
        </property>
    </bean>

	<!-- #6.2. myBatis(JDBC)설정 : SqlSessionFactory -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- name=datasource => 빈객체sqlSessionFactoryBean의  property명 datasource임(setter) -->
		<!-- ref의 dataSource는 위에서 선언한 datasource 빈객체를 의미함. -->
		<property name="dataSource" ref="dataSource"/>	
		<!-- 앞으로 생성할 모든 mapper파일을 한번에 읽어오도록하자. -->
		<!-- 여기서 classpath는 target/classes를 의미한다.-->
		<!-- src/main/resources 디렉토리에서 작성된 파일들은 classpath로 이동함.-->
		<property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
		
		<!-- mybatis-config.xml파일 위치를 명시함. -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	</bean>
	
	<!-- #6.3. SqlSessionTemplate 마이바티스 스프링 연동모듈의 핵심기능. -->
	<!-- SqlSessionTemplate : SqlSession 인터페이스를 구현클래스-->
	<!-- 여러 dao에서 공유하므로 메모리관리에 있어 최적화된 테크닉. -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- #11. 트랜잭션처리를 위한 트랜잭션매니저 빈 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- #11.1 @Transactional이 붙은 메소드를 대상으로 Transaction Advice를 적용 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	
	<!-- #11.1 선언적방식의 트랜잭션 처리 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" rollback-for="Exception" read-only="true"/>
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- #11.2 선언적방식의 트랜잭션 : aop pointcut/advice등록 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.kh.spring..*ServiceImpl.*(..))" id="serviceMethod"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>

</beans>
